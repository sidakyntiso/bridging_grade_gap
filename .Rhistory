rank.list <- lapply(c(1:len), function(i) get(paste("xecdf",i,sep = "")))
rank.dat  <-  as.data.frame(matrix(unlist(rank.list), nrow=length(unlist(rank.list[1]))))
colnames(rank.dat) <- paste("ta",c(1:len),sep = "")
rank.dat <- rank.dat %>% gather( ta, e_cdf,colnames(rank.dat))
#merge with dataframe
dat$e_cdf <- rank.dat[,2]
dat$student <- as.factor(c(1:g))
dat$ta <- as.factor(dat$ta)
tas = (unique(dat$ta))
students = paste("Student",c(1:5),sep = " ")
ta_ranks <- lapply(tas, function(i) rank(-dat$points[dat$ta==i]))
ta_ranks_dat <- as.data.frame(matrix(unlist(ta_ranks), nrow=length(unlist(ta_ranks[1]))))
lowest_grades = as.numeric(unlist(lapply(c(1:g), function(i) min(dat$points[dat$student==i]))))
highest_grades = as.numeric(unlist(lapply(c(1:g), function(i) max(dat$points[dat$student==i]))))
lowest_ranks = as.numeric(unlist(lapply(1:g, function(i) min(unlist(ta_ranks_dat[i,])))))
highest_ranks = as.numeric(unlist(lapply(1:g, function(i) max(unlist(ta_ranks_dat[i,])))))
dt <- data.frame(
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
coreltapos_bridges = rank(-df$corelta[df$bridges==1],
na.last="keep", ties.method= "average")
corpos_bridges = rank(-df$avg[df$bridges==1], na.last="keep",
ties.method= "average")
mae_grades = round(mean(abs(df$corelta[df$bridges==1] -
df$avg[df$bridges==1])),2)
mae_ranks = round(mean(abs(coreltapos_bridges-corpos_bridges)),2)
p <- ggplot() +
stat_ecdf(data =df, aes(corelta,colour=ta),
geom = "step",pad = F,lty=2)+theme_bw() +
geom_point(aes(x=points,y=e_cdf,shape=student,colour=ta),dat,size=3)+
scale_fill_grey()+xlab("Grade")+ylab("CDF")
if (plot){
#print diagnostics
out = dt %>%
kbl(caption = "Grading Bias for Bridging Students",
col.names = c("","True","Lowest","Highest","True","Lowest","Highest")) %>%
kable_classic(full_width = F, html_font = "Cambria")%>%
add_header_above(c(" " = 1,
"Grades" = 3,
"Ranks" = 3)) %>%
footnote(number = c(paste0("MAE of Grades: ",mae_grades,sep=""),
paste0("MAE of Ranks: ",mae_ranks,sep=""))
)
#return dataframe
return(p+out)
}
else {
out = dt %>%
kbl(caption = "Grading Bias for Bridging Students",
col.names = c("","True","Lowest","Highest","True","Lowest","Highest")) %>%
kable_classic(full_width = F, html_font = "Cambria")%>%
add_header_above(c(" " = 1,
"Grades" = 3,
"Ranks" = 3)) %>%
footnote(number = c(paste0("MAE of Grades: ",mae_grades,sep=""),
paste0("MAE of Ranks: ",mae_ranks,sep=""))
)
#return dataframe
return(out)
}
}
eval.grading.bias(df=df,plot = F)
load.grading.dat <- function(df){
#identify the number of graders and assign corelta based this
df$ta <- as.character(unlist(df$ta))
len <- length(unique(df$ta))
#remove irrelevant columns
ta <- unique(df$ta)
df <- df[,c("ta",ta)]
#missing observations
df$m = rowSums(is.na(df)) == ncol(df)-1
#bridnging observations
df$bridges = 0
df$bridges[rowSums(!is.na(df))==ncol(df)]=1
#identify traditional score
core1ta<-ifelse(df$ta==unique(df$ta)[1], df[,unique(df$ta)[1]], NA)
for (i in c(2:len)){
core1ta<-ifelse(df$ta==unique(df$ta)[i], df[,unique(df$ta)[i]], core1ta)
}
df$corelta <- core1ta
#identify traditional rank
df$coreltapos <-rank(-core1ta, na.last="keep", ties.method= "average")
#identify average of grades
df$avg  <- rowMeans(df[,c(2:(len+1))],na.rm =T)
#Get rank of averages
df$corpos<-rank(df$avg, na.last="keep", ties.method= "average")
return(df)
}
#' Assess evidence of systematic bias in grading
#' The function loads a grading file.
#' @param df Path to the input file
#' @return Table of grading bias for bridging observations
#' @export
eval.grading.bias <- function(df,plot = T){
df <- load.grading.dat(df=df)
#identify bridges
g = nrow(df[df$bridges==1,])
# create ecdf function for each TA
len <- length(unique(df$ta))
# for each grader
for (i in c(1:len)){
x = ecdf(df[[paste("ta",i,sep = "")]])
# scores for each bridging student
assign(paste("xpoints",i,sep = ""), df[[paste("ta",i,sep = "")]][df$bridges==1] )
# associated point on the grader's ecdf curve
assign(paste("xecdf",i,sep = ""), x(df[[paste("ta",i,sep = "")]][df$bridges==1]))
}
#list of scores for each bridging students
dat.list <- lapply(c(1:len), function(i) get(paste("xpoints",i,sep = "")))
#convert list to dataframe
dat  <-  as.data.frame(matrix(unlist(dat.list), nrow=length(unlist(dat.list[1]))))
colnames(dat) <- paste("ta",c(1:len),sep = "")
#reshape dataframe long
dat <- dat %>% gather(ta, points, colnames(dat))
#same procedure for list of ranks
rank.list <- lapply(c(1:len), function(i) get(paste("xecdf",i,sep = "")))
rank.dat  <-  as.data.frame(matrix(unlist(rank.list), nrow=length(unlist(rank.list[1]))))
colnames(rank.dat) <- paste("ta",c(1:len),sep = "")
rank.dat <- rank.dat %>% gather( ta, e_cdf,colnames(rank.dat))
#merge with dataframe
dat$e_cdf <- rank.dat[,2]
dat$student <- as.factor(c(1:g))
dat$ta <- as.factor(dat$ta)
tas = (unique(dat$ta))
students = paste("Student",c(1:5),sep = " ")
ta_ranks <- lapply(tas, function(i) rank(-dat$points[dat$ta==i]))
ta_ranks_dat <- as.data.frame(matrix(unlist(ta_ranks), nrow=length(unlist(ta_ranks[1]))))
lowest_grades = as.numeric(unlist(lapply(c(1:g), function(i) min(dat$points[dat$student==i]))))
highest_grades = as.numeric(unlist(lapply(c(1:g), function(i) max(dat$points[dat$student==i]))))
lowest_ranks = as.numeric(unlist(lapply(1:g, function(i) min(unlist(ta_ranks_dat[i,])))))
highest_ranks = as.numeric(unlist(lapply(1:g, function(i) max(unlist(ta_ranks_dat[i,])))))
dt <- data.frame(
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
coreltapos_bridges = rank(-df$corelta[df$bridges==1],
na.last="keep", ties.method= "average")
corpos_bridges = rank(-df$avg[df$bridges==1], na.last="keep",
ties.method= "average")
mae_grades = round(mean(abs(df$corelta[df$bridges==1] -
df$avg[df$bridges==1])),2)
mae_ranks = round(mean(abs(coreltapos_bridges-corpos_bridges)),2)
p <- ggplot() +
stat_ecdf(data =df, aes(corelta,colour=ta),
geom = "step",pad = F,lty=2)+theme_bw() +
geom_point(aes(x=points,y=e_cdf,shape=student,colour=ta),dat,size=3)+
scale_fill_grey()+xlab("Grade")+ylab("CDF")
if (plot){
#print diagnostics
out = dt %>%
kbl(caption = "Grading Bias for Bridging Students",
col.names = c("","True","Lowest","Highest","True","Lowest","Highest")) %>%
kable_classic(full_width = F, html_font = "Cambria")%>%
add_header_above(c(" " = 1,
"Grades" = 3,
"Ranks" = 3)) %>%
footnote(number = c(paste0("MAE of Grades: ",mae_grades,sep=""),
paste0("MAE of Ranks: ",mae_ranks,sep=""))
)
#return dataframe
return(p+out)
}
else {
out = dt %>%
kbl(caption = "Grading Bias for Bridging Students",
col.names = c("","True","Lowest","Highest","True","Lowest","Highest")) %>%
kable_classic(full_width = F, html_font = "Cambria")%>%
add_header_above(c(" " = 1,
"Grades" = 3,
"Ranks" = 3)) %>%
footnote(number = c(paste0("MAE of Grades: ",mae_grades,sep=""),
paste0("MAE of Ranks: ",mae_ranks,sep=""))
)
#return dataframe
return(out)
}
}
eval.grading.bias(df=df,plot = F)
eval.grading.bias(df=df,plot = T)
dt <- data.frame(headr = c("","","Grades","","",'Ranks',""),
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
#' Assess evidence of systematic bias in grading
#' The function loads a grading file.
#' @param df Path to the input file
#' @return Table of grading bias for bridging observations
#' @export
eval.grading.bias <- function(df,plot = T){
df <- load.grading.dat(df=df)
#identify bridges
g = nrow(df[df$bridges==1,])
# create ecdf function for each TA
len <- length(unique(df$ta))
# for each grader
for (i in c(1:len)){
x = ecdf(df[[paste("ta",i,sep = "")]])
# scores for each bridging student
assign(paste("xpoints",i,sep = ""), df[[paste("ta",i,sep = "")]][df$bridges==1] )
# associated point on the grader's ecdf curve
assign(paste("xecdf",i,sep = ""), x(df[[paste("ta",i,sep = "")]][df$bridges==1]))
}
#list of scores for each bridging students
dat.list <- lapply(c(1:len), function(i) get(paste("xpoints",i,sep = "")))
#convert list to dataframe
dat  <-  as.data.frame(matrix(unlist(dat.list), nrow=length(unlist(dat.list[1]))))
colnames(dat) <- paste("ta",c(1:len),sep = "")
#reshape dataframe long
dat <- dat %>% gather(ta, points, colnames(dat))
#same procedure for list of ranks
rank.list <- lapply(c(1:len), function(i) get(paste("xecdf",i,sep = "")))
rank.dat  <-  as.data.frame(matrix(unlist(rank.list), nrow=length(unlist(rank.list[1]))))
colnames(rank.dat) <- paste("ta",c(1:len),sep = "")
rank.dat <- rank.dat %>% gather( ta, e_cdf,colnames(rank.dat))
#merge with dataframe
dat$e_cdf <- rank.dat[,2]
dat$student <- as.factor(c(1:g))
dat$ta <- as.factor(dat$ta)
tas = (unique(dat$ta))
students = paste("Student",c(1:5),sep = " ")
ta_ranks <- lapply(tas, function(i) rank(-dat$points[dat$ta==i]))
ta_ranks_dat <- as.data.frame(matrix(unlist(ta_ranks), nrow=length(unlist(ta_ranks[1]))))
lowest_grades = as.numeric(unlist(lapply(c(1:g), function(i) min(dat$points[dat$student==i]))))
highest_grades = as.numeric(unlist(lapply(c(1:g), function(i) max(dat$points[dat$student==i]))))
lowest_ranks = as.numeric(unlist(lapply(1:g, function(i) min(unlist(ta_ranks_dat[i,])))))
highest_ranks = as.numeric(unlist(lapply(1:g, function(i) max(unlist(ta_ranks_dat[i,])))))
dt <- data.frame(headr = c("","","Grades","","",'Ranks',""),
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
colnames(dt)[1] = NA
coreltapos_bridges = rank(-df$corelta[df$bridges==1],
na.last="keep", ties.method= "average")
corpos_bridges = rank(-df$avg[df$bridges==1], na.last="keep",
ties.method= "average")
mae_grades = round(mean(abs(df$corelta[df$bridges==1] -
df$avg[df$bridges==1])),2)
mae_ranks = round(mean(abs(coreltapos_bridges-corpos_bridges)),2)
if(plot==T){
p <- ggplot() +
stat_ecdf(data =df, aes(corelta,colour=ta),
geom = "step",pad = F,lty=2)+theme_bw() +
geom_point(aes(x=points,y=e_cdf,shape=student,colour=ta),dat,size=3)+
scale_fill_grey()+xlab("Grade")+ylab("CDF")
print(p)
}
#return dataframe
return(dt)
}
eval.grading.bias(df=df,plot = T)
#' Assess evidence of systematic bias in grading
#' The function loads a grading file.
#' @param df Path to the input file
#' @return Table of grading bias for bridging observations
#' @export
eval.grading.bias <- function(df,plot = T){
df <- load.grading.dat(df=df)
#identify bridges
g = nrow(df[df$bridges==1,])
# create ecdf function for each TA
len <- length(unique(df$ta))
# for each grader
for (i in c(1:len)){
x = ecdf(df[[paste("ta",i,sep = "")]])
# scores for each bridging student
assign(paste("xpoints",i,sep = ""), df[[paste("ta",i,sep = "")]][df$bridges==1] )
# associated point on the grader's ecdf curve
assign(paste("xecdf",i,sep = ""), x(df[[paste("ta",i,sep = "")]][df$bridges==1]))
}
#list of scores for each bridging students
dat.list <- lapply(c(1:len), function(i) get(paste("xpoints",i,sep = "")))
#convert list to dataframe
dat  <-  as.data.frame(matrix(unlist(dat.list), nrow=length(unlist(dat.list[1]))))
colnames(dat) <- paste("ta",c(1:len),sep = "")
#reshape dataframe long
dat <- dat %>% gather(ta, points, colnames(dat))
#same procedure for list of ranks
rank.list <- lapply(c(1:len), function(i) get(paste("xecdf",i,sep = "")))
rank.dat  <-  as.data.frame(matrix(unlist(rank.list), nrow=length(unlist(rank.list[1]))))
colnames(rank.dat) <- paste("ta",c(1:len),sep = "")
rank.dat <- rank.dat %>% gather( ta, e_cdf,colnames(rank.dat))
#merge with dataframe
dat$e_cdf <- rank.dat[,2]
dat$student <- as.factor(c(1:g))
dat$ta <- as.factor(dat$ta)
tas = (unique(dat$ta))
students = paste("Student",c(1:5),sep = " ")
ta_ranks <- lapply(tas, function(i) rank(-dat$points[dat$ta==i]))
ta_ranks_dat <- as.data.frame(matrix(unlist(ta_ranks), nrow=length(unlist(ta_ranks[1]))))
lowest_grades = as.numeric(unlist(lapply(c(1:g), function(i) min(dat$points[dat$student==i]))))
highest_grades = as.numeric(unlist(lapply(c(1:g), function(i) max(dat$points[dat$student==i]))))
lowest_ranks = as.numeric(unlist(lapply(1:g, function(i) min(unlist(ta_ranks_dat[i,])))))
highest_ranks = as.numeric(unlist(lapply(1:g, function(i) max(unlist(ta_ranks_dat[i,])))))
dt <- data.frame(
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
dt <- plyr::rbind.fill(headr = c("","","Grades","","",'Ranks',""),
dt)
coreltapos_bridges = rank(-df$corelta[df$bridges==1],
na.last="keep", ties.method= "average")
corpos_bridges = rank(-df$avg[df$bridges==1], na.last="keep",
ties.method= "average")
mae_grades = round(mean(abs(df$corelta[df$bridges==1] -
df$avg[df$bridges==1])),2)
mae_ranks = round(mean(abs(coreltapos_bridges-corpos_bridges)),2)
if(plot==T){
p <- ggplot() +
stat_ecdf(data =df, aes(corelta,colour=ta),
geom = "step",pad = F,lty=2)+theme_bw() +
geom_point(aes(x=points,y=e_cdf,shape=student,colour=ta),dat,size=3)+
scale_fill_grey()+xlab("Grade")+ylab("CDF")
print(p)
}
#return dataframe
return(dt)
}
eval.grading.bias(df=df,plot = T)
headr <- data.frame(headr = c("","","Grades","","",'Ranks',""),
colz = c("","True","Lowest","Highest","True","Lowest","Highest"))
#' Assess evidence of systematic bias in grading
#' The function loads a grading file.
#' @param df Path to the input file
#' @return Table of grading bias for bridging observations
#' @export
eval.grading.bias <- function(df,plot = T){
df <- load.grading.dat(df=df)
#identify bridges
g = nrow(df[df$bridges==1,])
# create ecdf function for each TA
len <- length(unique(df$ta))
# for each grader
for (i in c(1:len)){
x = ecdf(df[[paste("ta",i,sep = "")]])
# scores for each bridging student
assign(paste("xpoints",i,sep = ""), df[[paste("ta",i,sep = "")]][df$bridges==1] )
# associated point on the grader's ecdf curve
assign(paste("xecdf",i,sep = ""), x(df[[paste("ta",i,sep = "")]][df$bridges==1]))
}
#list of scores for each bridging students
dat.list <- lapply(c(1:len), function(i) get(paste("xpoints",i,sep = "")))
#convert list to dataframe
dat  <-  as.data.frame(matrix(unlist(dat.list), nrow=length(unlist(dat.list[1]))))
colnames(dat) <- paste("ta",c(1:len),sep = "")
#reshape dataframe long
dat <- dat %>% gather(ta, points, colnames(dat))
#same procedure for list of ranks
rank.list <- lapply(c(1:len), function(i) get(paste("xecdf",i,sep = "")))
rank.dat  <-  as.data.frame(matrix(unlist(rank.list), nrow=length(unlist(rank.list[1]))))
colnames(rank.dat) <- paste("ta",c(1:len),sep = "")
rank.dat <- rank.dat %>% gather( ta, e_cdf,colnames(rank.dat))
#merge with dataframe
dat$e_cdf <- rank.dat[,2]
dat$student <- as.factor(c(1:g))
dat$ta <- as.factor(dat$ta)
tas = (unique(dat$ta))
students = paste("Student",c(1:5),sep = " ")
ta_ranks <- lapply(tas, function(i) rank(-dat$points[dat$ta==i]))
ta_ranks_dat <- as.data.frame(matrix(unlist(ta_ranks), nrow=length(unlist(ta_ranks[1]))))
lowest_grades = as.numeric(unlist(lapply(c(1:g), function(i) min(dat$points[dat$student==i]))))
highest_grades = as.numeric(unlist(lapply(c(1:g), function(i) max(dat$points[dat$student==i]))))
lowest_ranks = as.numeric(unlist(lapply(1:g, function(i) min(unlist(ta_ranks_dat[i,])))))
highest_ranks = as.numeric(unlist(lapply(1:g, function(i) max(unlist(ta_ranks_dat[i,])))))
dt <- data.frame(
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
headr <- data.frame(headr = c("","","Grades","","",'Ranks',""),
colz = c("","True","Lowest","Highest","True","Lowest","Highest"))
dt <- plyr::rbind.fill(headr,dt)
coreltapos_bridges = rank(-df$corelta[df$bridges==1],
na.last="keep", ties.method= "average")
corpos_bridges = rank(-df$avg[df$bridges==1], na.last="keep",
ties.method= "average")
mae_grades = round(mean(abs(df$corelta[df$bridges==1] -
df$avg[df$bridges==1])),2)
mae_ranks = round(mean(abs(coreltapos_bridges-corpos_bridges)),2)
if(plot==T){
p <- ggplot() +
stat_ecdf(data =df, aes(corelta,colour=ta),
geom = "step",pad = F,lty=2)+theme_bw() +
geom_point(aes(x=points,y=e_cdf,shape=student,colour=ta),dat,size=3)+
scale_fill_grey()+xlab("Grade")+ylab("CDF")
print(p)
}
#return dataframe
return(dt)
}
eval.grading.bias(df=df,plot = T)
html_table2 <- function(x, digits = 3, verbose = TRUE, ...){
# Let's begin
table_settings = list(...)
#outcome_label = c("","True","Lowest","Highest","True","Lowest","Highest")
outcome_label="x"
# Okay, static beginning
table_begin = paste0("<table>\n")
# Coeff header row
coeff_header = paste0(
"<thead>\n",
"<tr>\n",
'\t<th style="text-align:left;border-bottom: 1px solid transparent;border-top: 1px solid black"> </th>\n',
'\t<th colspan = 3 style="text-align:center;border-bottom: 1px solid black;border-top: 1px solid black"> Grade: ',
'\t<th colspan = 3 style="text-align:center;border-bottom: 1px solid black;border-top: 1px solid black"> Rank: ',
'</th>\n',
"<tr>\n",
'\t<th style="text-align:left;border-bottom: 1px solid transparent;border-top: 1px solid black"> </th>\n',
'\t<th colspan = 6 style="text-align:center;border-bottom: 1px solid black;border-top: 1px solid black"> Outcome: ',
outcome_label,'</th>\n',
"</tr>\n",
"</thead>\n"
)
# Treatment result
# Why paste and not sprintf? Easier to handle precision on the digits.
coeff_results = paste0(
"<tbody>\n <tr>\n",
'\t<td style="text-align:left; border-bottom: 1px solid black"><i>',
dt[1,1], "</i></td>\n",
'\t<td style="text-align:right;border-bottom: 1px solid black">',
dt[1,2], " </td>\n",
'\t<td style="text-align:right;border-bottom: 1px solid black">',
dt[1,3], " </td>\n",
'\t<td style="text-align:right;border-bottom: 1px solid black">',
dt[1,4]," </td>\n",
'\t<td style="text-align:right;border-bottom: 1px solid black">',
dt[1,5], "\\% </td>\n",
'\t<td style="text-align:right;border-bottom: 1px solid black">',
dt[1,6], "\\% </td>\n",
'\t<td style="text-align:right;border-bottom: 1px solid black">',
dt[1,7], "\\% </td>\n",
"</tr>\n</tbody>\n")
table_end <- "</table>"
# Stick it all together
table = paste0(table_begin,
coeff_header,
coeff_results,
table_end)
# Cat to output valid LaTeX for rmarkdown
if (verbose) cat(table)
return(invisible(table))
}
html_table2(x=x)
df <- load.grading.dat(df=df)
#identify bridges
g = nrow(df[df$bridges==1,])
# create ecdf function for each TA
len <- length(unique(df$ta))
# for each grader
for (i in c(1:len)){
x = ecdf(df[[paste("ta",i,sep = "")]])
# scores for each bridging student
assign(paste("xpoints",i,sep = ""), df[[paste("ta",i,sep = "")]][df$bridges==1] )
# associated point on the grader's ecdf curve
assign(paste("xecdf",i,sep = ""), x(df[[paste("ta",i,sep = "")]][df$bridges==1]))
}
#list of scores for each bridging students
dat.list <- lapply(c(1:len), function(i) get(paste("xpoints",i,sep = "")))
#convert list to dataframe
dat  <-  as.data.frame(matrix(unlist(dat.list), nrow=length(unlist(dat.list[1]))))
colnames(dat) <- paste("ta",c(1:len),sep = "")
#reshape dataframe long
dat <- dat %>% gather(ta, points, colnames(dat))
#same procedure for list of ranks
rank.list <- lapply(c(1:len), function(i) get(paste("xecdf",i,sep = "")))
rank.dat  <-  as.data.frame(matrix(unlist(rank.list), nrow=length(unlist(rank.list[1]))))
colnames(rank.dat) <- paste("ta",c(1:len),sep = "")
rank.dat <- rank.dat %>% gather( ta, e_cdf,colnames(rank.dat))
#merge with dataframe
dat$e_cdf <- rank.dat[,2]
dat$student <- as.factor(c(1:g))
dat$ta <- as.factor(dat$ta)
tas = (unique(dat$ta))
students = paste("Student",c(1:5),sep = " ")
ta_ranks <- lapply(tas, function(i) rank(-dat$points[dat$ta==i]))
ta_ranks_dat <- as.data.frame(matrix(unlist(ta_ranks), nrow=length(unlist(ta_ranks[1]))))
lowest_grades = as.numeric(unlist(lapply(c(1:g), function(i) min(dat$points[dat$student==i]))))
highest_grades = as.numeric(unlist(lapply(c(1:g), function(i) max(dat$points[dat$student==i]))))
lowest_ranks = as.numeric(unlist(lapply(1:g, function(i) min(unlist(ta_ranks_dat[i,])))))
highest_ranks = as.numeric(unlist(lapply(1:g, function(i) max(unlist(ta_ranks_dat[i,])))))
dt <- data.frame(
students = students,
avg_grades = round(df$avg[df$bridges==1],2),
lowest_grades = round(lowest_grades,2),
highest_grades = round(highest_grades,2),
avg_ranks = rank(-df$avg[df$bridges==1]),
lowest_ranks = round(lowest_ranks),
highest_ranks =round(highest_ranks))
html_table2(x=x)
